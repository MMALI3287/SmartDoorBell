# Contributing to Smart Video Doorbell

First off, thank you for considering contributing to Smart Video Doorbell! It's people like you that make it such a great tool.

## Code of Conduct

This project and everyone participating in it is governed by our Code of Conduct. By participating, you are expected to uphold this code. Please report unacceptable behavior to project maintainers.

## How Can I Contribute?

### Reporting Bugs

Before creating bug reports, please check the issue list as you might find out that you don't need to create one. When you are creating a bug report, please include as many details as possible:

- **Use a clear and descriptive title**
- **Describe the exact steps which reproduce the problem**
- **Provide specific examples to demonstrate the steps**
- **Describe the behavior you observed after following the steps**
- **Explain which behavior you expected to see instead and why**
- **Include screenshots and animated GIFs if possible**
- **Include your environment details (OS, hardware setup, etc.)**

### Suggesting Enhancements

Enhancement suggestions are tracked as GitHub issues. Create an issue and provide the following information:

- **Use a clear and descriptive title**
- **Provide a step-by-step description of the suggested enhancement**
- **Provide specific examples to demonstrate the steps**
- **Describe the current behavior and explain the behavior you expected to see**
- **Explain why this enhancement would be useful**
- **List some other applications where this enhancement exists, if applicable**

### Pull Requests

- Fork the repository and create your branch from `main`
- If you've added code that should be tested, add tests
- If you've changed APIs, update the documentation
- Ensure the test suite passes
- Make sure your code lints
- Issue that pull request!

## Development Process

1. Fork the repository
2. Create a new branch:

   ```bash
   git checkout -b feature/your-feature-name
   ```

3. Make your changes and commit:

   ```bash
   git commit -m "Description of changes"
   ```

4. Push to your fork:

   ```bash
   git push origin feature/your-feature-name
   ```

5. Open a Pull Request

## Coding Standards

### Python

- Follow PEP 8 style guide
- Use type hints for function arguments and return values
- Write docstrings for all functions and classes
- Maintain test coverage above 80%

### Kotlin/Android

- Follow Kotlin coding conventions
- Use Material Design guidelines
- Implement proper error handling
- Write unit tests for ViewModels and Use Cases

### C++/Arduino

- Follow Arduino style guide
- Use meaningful variable and function names
- Comment complex logic
- Keep functions focused and small

## Testing

- Write unit tests for new features
- Ensure all tests pass before submitting PR
- Include integration tests where applicable
- Test edge cases and error conditions

## Documentation

- Update README.md if needed
- Document new features or changes in behavior
- Keep code comments current
- Update API documentation

## Review Process

1. Maintainers will review your PR
2. Address any requested changes
3. Once approved, PR will be merged
4. Your contribution will be recognized in release notes

## Version Control Practices

- Write meaningful commit messages
- Keep commits focused and atomic
- Reference issues in commit messages
- Follow semantic versioning

## Community

- Join our Discord server for discussions
- Participate in issue discussions
- Help others in the community
- Share your ideas and feedback

## Recognition

Contributors will be:

- Listed in our CONTRIBUTORS.md file
- Mentioned in release notes
- Recognized in project documentation

## Need Help?

- Check our documentation
- Join the Discord community
- Create an issue for questions
- Contact maintainers directly

Thank you for your contributions! ðŸŽ‰

---

Note: This contributing guide is adapted from the [Contributor Covenant](https://www.contributor-covenant.org/) and standard open source practices.
